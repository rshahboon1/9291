{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/media/light/79F9655F0EA04215/workZone/ui/9291/92910/App.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { StatusBar } from \"expo-status-bar\";\nimport React, { Component } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Root } from \"native-base\";\nimport * as Font from \"expo-font\";\nimport { AppLoading } from \"expo\";\nimport { createSwitchNavigator, createAppContainer } from \"react-navigation\";\nimport HomeScreen from \"./app/screens/Home/Home\";\nimport LandingScreen from \"./app/screens/Landing/Landing\";\n\nvar App = function (_Component) {\n  _inherits(App, _Component);\n\n  var _super = _createSuper(App);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Font.loadAsync({\n                Roboto: require(\"native-base/Fonts/Roboto.ttf\"),\n                Roboto_medium: require(\"native-base/Fonts/Roboto_medium.ttf\")\n              }));\n\n            case 2:\n              this.setState({\n                loading: false\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.loading) {\n        return React.createElement(Root, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 9\n          }\n        }, React.createElement(AppLoading, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 11\n          }\n        }));\n      } else {\n        return React.createElement(Root, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 9\n          }\n        }, React.createElement(AppContainer, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 11\n          }\n        }));\n      }\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport { App as default };\nvar AppSwitchNavigator = createSwitchNavigator({\n  Landing: {\n    screen: LandingScreen\n  },\n  Home: {\n    screen: HomeScreen\n  }\n});\nvar AppContainer = createAppContainer(AppSwitchNavigator);","map":{"version":3,"sources":["/media/light/79F9655F0EA04215/workZone/ui/9291/92910/App.js"],"names":["StatusBar","React","Component","Root","Font","AppLoading","createSwitchNavigator","createAppContainer","HomeScreen","LandingScreen","App","props","state","loading","loadAsync","Roboto","require","Roboto_medium","setState","AppSwitchNavigator","Landing","screen","Home","AppContainer"],"mappings":";;;;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;AAEA,SAASC,IAAT,QAAqB,aAArB;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,SAASC,UAAT,QAA2B,MAA3B;AACA,SAASC,qBAAT,EAAgCC,kBAAhC,QAA0D,kBAA1D;AAEA,OAAOC,UAAP;AACA,OAAOC,aAAP;;IAEqBC,G;;;;;AACnB,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAb;AAFiB;AAGlB;;;;;;;;;;+CAEOT,IAAI,CAACU,SAAL,CAAe;AACnBC,gBAAAA,MAAM,EAAEC,OAAO,CAAC,8BAAD,CADI;AAEnBC,gBAAAA,aAAa,EAAED,OAAO,CAAC,qCAAD;AAFH,eAAf,C;;;AAIN,mBAAKE,QAAL,CAAc;AAAEL,gBAAAA,OAAO,EAAE;AAAX,eAAd;;;;;;;;;;;6BAEO;AACP,UAAI,KAAKD,KAAL,CAAWC,OAAf,EAAwB;AACtB,eACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF;AAKD,OAND,MAMO;AACL,eACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF;AAKD;AACF;;;;EA1B8BX,S;;SAAZQ,G;AA4BrB,IAAMS,kBAAkB,GAAGb,qBAAqB,CAAC;AAC/Cc,EAAAA,OAAO,EAAE;AAAEC,IAAAA,MAAM,EAAEZ;AAAV,GADsC;AAE/Ca,EAAAA,IAAI,EAAE;AAAED,IAAAA,MAAM,EAAEb;AAAV;AAFyC,CAAD,CAAhD;AAIA,IAAMe,YAAY,GAAGhB,kBAAkB,CAACY,kBAAD,CAAvC","sourcesContent":["import { StatusBar } from \"expo-status-bar\";\nimport React, { Component } from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { Root } from \"native-base\";\nimport * as Font from \"expo-font\";\nimport { AppLoading } from \"expo\";\nimport { createSwitchNavigator, createAppContainer } from \"react-navigation\";\n\nimport HomeScreen from \"./app/screens/Home/Home\";\nimport LandingScreen from \"./app/screens/Landing/Landing\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { loading: true };\n  }\n  async componentDidMount() {\n    await Font.loadAsync({\n      Roboto: require(\"native-base/Fonts/Roboto.ttf\"),\n      Roboto_medium: require(\"native-base/Fonts/Roboto_medium.ttf\"),\n    });\n    this.setState({ loading: false });\n  }\n  render() {\n    if (this.state.loading) {\n      return (\n        <Root>\n          <AppLoading />\n        </Root>\n      );\n    } else {\n      return (\n        <Root>\n          <AppContainer />\n        </Root>\n      );\n    }\n  }\n}\nconst AppSwitchNavigator = createSwitchNavigator({\n  Landing: { screen: LandingScreen },\n  Home: { screen: HomeScreen },\n});\nconst AppContainer = createAppContainer(AppSwitchNavigator);\n"]},"metadata":{},"sourceType":"module"}